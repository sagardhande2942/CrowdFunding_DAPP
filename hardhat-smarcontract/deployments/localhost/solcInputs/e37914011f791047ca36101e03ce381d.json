{
  "language": "Solidity",
  "sources": {
    "contracts/CFContractFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./CrowdFunding.sol\";\r\n\r\ncontract CFContractFactory {\r\n    CrowdFunding[] public s_CampaignAddresses;\r\n\r\n    function createCampaign(\r\n        uint256 minimumAmount,\r\n        uint256 numberOfMilestones,\r\n        uint256[] memory milestoneFunds,\r\n        uint256 duration,\r\n        uint256 targetAmount\r\n    ) external returns (CrowdFunding) {\r\n        CrowdFunding myCampaign = new CrowdFunding({\r\n            minimumAmount: minimumAmount,\r\n            numberofmilestones: numberOfMilestones,\r\n            milestonefunds: milestoneFunds,\r\n            duration: duration,\r\n            targetamount: targetAmount\r\n        });\r\n\r\n        s_CampaignAddresses.push(myCampaign);\r\n        return myCampaign;\r\n    }\r\n}\r\n"
    },
    "contracts/CrowdFunding.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\ncontract CrowdFunding {\r\n    /*\r\n        1. fund (also called by the receive function)\r\n        2. withdraw\r\n        3. \r\n    */\r\n\r\n    error CrowdFunding__amountNotEnough();\r\n    error CrowdFunding__youHaveReachedFallback(address, uint256);\r\n    error CrowdFunding__thisCampaignIsPastDeadline();\r\n    error CrowdFunding__allMileStonesReached(uint256);\r\n    error CrowdFunding__notEnoughFundsToReleaseForThisMilestone(uint256);\r\n    error CrowdFunding__fundGeneratedGreaterThanTargetAmount(uint256);\r\n\r\n    uint256 public immutable i_MinimumAmount;\r\n    address[] public s_Funders;\r\n    uint256[] public s_MilestoneFunds;\r\n    mapping(address => bool) s_FundersMap;\r\n    mapping(address => uint256) s_FundersFund;\r\n    uint256 public s_lastBlockTimeStamp;\r\n    uint256 public immutable i_Duration;\r\n    uint256 public immutable i_NumberOfMilestones;\r\n    uint256 public s_CurrentMilestone;\r\n    address public immutable i_owner;\r\n    uint256 public immutable i_TargetAmount;\r\n\r\n    constructor(\r\n        uint256 minimumAmount,\r\n        uint256 numberofmilestones,\r\n        uint256[] memory milestonefunds,\r\n        uint256 duration,\r\n        uint256 targetamount\r\n    ) {\r\n        i_MinimumAmount = minimumAmount;\r\n        s_MilestoneFunds = milestonefunds;\r\n        s_lastBlockTimeStamp = block.timestamp;\r\n        i_Duration = duration;\r\n        s_CurrentMilestone = 0;\r\n        i_NumberOfMilestones = numberofmilestones;\r\n        i_owner = msg.sender;\r\n        i_TargetAmount = targetamount;\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        revert CrowdFunding__youHaveReachedFallback(msg.sender, msg.value);\r\n    }\r\n\r\n    function fund() public payable {\r\n        if (isDeadlinePassed() == true) {\r\n            revert CrowdFunding__thisCampaignIsPastDeadline();\r\n        }\r\n\r\n        if (msg.value < i_MinimumAmount) {\r\n            revert CrowdFunding__amountNotEnough();\r\n        }\r\n\r\n        if (getBalance() + msg.value > i_TargetAmount) {\r\n            revert CrowdFunding__fundGeneratedGreaterThanTargetAmount(\r\n                i_TargetAmount - getBalance()\r\n            );\r\n        }\r\n\r\n        if (s_FundersMap[msg.sender] == true) {\r\n            s_FundersFund[msg.sender] += msg.value;\r\n        } else {\r\n            s_Funders.push(msg.sender);\r\n            s_FundersMap[msg.sender] = true;\r\n            s_FundersFund[msg.sender] = msg.value;\r\n        }\r\n    }\r\n\r\n    function fundRelease() external payable onlyOwner {\r\n        if (s_CurrentMilestone >= i_NumberOfMilestones) {\r\n            revert CrowdFunding__allMileStonesReached(i_NumberOfMilestones);\r\n        }\r\n\r\n        uint256 fundToBeReleased = s_MilestoneFunds[s_CurrentMilestone];\r\n\r\n        if (fundToBeReleased > getBalance()) {\r\n            revert CrowdFunding__notEnoughFundsToReleaseForThisMilestone(getBalance());\r\n        }\r\n\r\n        payable(msg.sender).transfer(fundToBeReleased);\r\n\r\n        s_CurrentMilestone += 1;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getNumberOfFunders() public view returns (uint256) {\r\n        return s_Funders.length;\r\n    }\r\n\r\n    function isDeadlinePassed() public view returns (bool) {\r\n        return (block.timestamp - s_lastBlockTimeStamp) > i_Duration;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == i_owner);\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}